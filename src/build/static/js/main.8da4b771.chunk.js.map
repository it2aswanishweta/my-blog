{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","pages/NotFoundPage.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","NotFoundPage","ArticlePage","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8da4b771.chunk.js","sourcesContent":["import React from 'react'\n\nconst HomePage = () => (\n    <>\n    <h1>Hello, welcome to my blog!</h1>\n\n    <p>Hi all, my name is Shweta Aswani a graduate student pursuing my Masters\n       in Computer Science from State University of New York at Binghamton. \n    </p>\n    <p>\n        I completed my Bachelors of Engineering in 2015 from Mumbai University \n        in India. Post that I worked as a professional for 3 years before coming\n        for my Masters in 2018.\n    </p>\n    <p>\n        I worked in two companies in India -> Accenture and Larsen & Toubro Infotech\n        I have worked as a SAP Basis and a Cloud Professional in India\n    </p>\n    </>\n);\n\nexport default HomePage;","import React from 'react'\n\nconst AboutPage = () => (\n    <>\n    <h1>About me</h1>\n\n    <p>Hi all, my name is Shweta Aswani a graduate student pursuing my Masters\n       in Computer Science from State University of New York at Binghamton. \n    </p>\n    <p>\n        I completed my Bachelors of Engineering in 2015 from Mumbai University \n        in India. Post that I worked as a professional for 3 years before coming\n        for my Masters in 2018.\n    </p>\n    <p>\n        I worked in two companies in India -> Accenture and Larsen & Toubro Infotech\n        I have worked as a SAP Basis and a Cloud Professional in India\n    </p>\n    </>\n);\n\nexport default AboutPage;","const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            `Welcome! Today we are going to be talking about the fastest way to learn react. Below \n             are the following.\n             1) Set up your Environemnt\n             2) Get the React Extension for Your Browser\n             3) Dive into the Tutorial\n             4) Read the React Docs\n             5) Start Testing`\n        ]\n\n    },\n    {\n        name: 'learn-node',\n        title: 'How to Build a Node and Express Server in 10 Minutes',\n        content: [\n            `In this article, we are going to be talking looking at a very quick way\n            to set up a Node.js server.\n            Step 1: Install node\n            Step 2: Setup npm\n            Step 3: Install and import express middleware\n            Step 4: Add a JSON route handler\n            Step 5: Add a HTML route handler\n            Step 5: Start server\n            Step 6: Test`\n        ]\n\n    },\n    {\n        name: 'my-thoughts-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `1. Keep it brief - usually two pages maximum.\n             2. Avoid unnecessary personal detail such as age, religion, and sex.\n             3. Don’t write in the first person – start sentences with verbs.\n             4. List your career history in reverse chronological order. Don’t forget to include a short note to explain any gaps.\n             5. Use bullet points for achievements and responsibilities – include more detail on recent roles and less on older ones, unless they are particularly relevant to the job you are applying for.\n             6. List educational institutions and qualifications in reverse chronological order.\n             7. Include computer skills, language skills, and any relevant training.\n             8. Keep your hobbies and interest section short.\n             9. References can be provided on request – you don’t need to include their contact details on your resume.\n             10. Check for typos. Even if you think your resume is error-free, it’s worth asking a friend to read it through.`\n        ]\n\n    },\n];\n\nexport default articles;","import React from 'react';\nimport {Link} from 'react-router-dom';\nconst ArticlesList = ({articles}) => (\n\n    <>\n    {articles.map((article, key) => (\n\n        <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\n            <h3>{article.title}</h3>\n            <p>{article.content[0].substring(0,150)}...</p>\n        </Link>\n        \n    ))}\n    </>\n);\n\nexport default ArticlesList","import React from 'react';\nimport articleContent from './article-content';\nimport ArticlesList from '../components/ArticlesList';\n\nconst ArticlesListPage = () => (\n    <>\n    <h1>Articles</h1>\n    <ArticlesList articles={articleContent} />\n  \n    </>\n);\n\nexport default ArticlesListPage;","import React from 'react';\n\nconst CommentsList = ({ comments }) => (\n    <>\n    <h3>Comments:</h3>\n    {comments.map((comment, key) => (\n        <div className=\"comment\" key={key}>\n            <h4>{comment.username}</h4>\n            <p>{comment.text}</p>\n        </div>\n    ))}\n    </>\n);\n\nexport default CommentsList;","import React from 'react';\n\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo }) => {\n    const upvoteArticle = async () => {\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n    }\n    return (\n        <div id=\"upvotes-section\">\n            <button onClick={() => upvoteArticle()}>Add Upvote</button>\n            <p>This post has been upvoted {upvotes} times</p>\n        </div>\n    );\n}\n\nexport default UpvotesSection;","import React, { useState } from 'react';\n\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\n            method: 'post',\n            body: JSON.stringify({ username, text: commentText }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n    return (\n        <div id=\"add-comment-form\">\n            <h3>Add a Comment</h3>\n            <label>\n                Name:\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n            </label>\n            <label>\n                Comment:\n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\n            </label>\n            <button onClick={() => addComment()}>Add Comment</button>\n        </div>\n    );\n}\n\nexport default AddCommentForm;","import React from 'react';\n\nconst NotFoundPage = () => (\n\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React, {useState, useEffect} from 'react';\nimport articleContent from './article-content';\nimport ArticlesList from '../components/ArticlesList';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport AddCommentForm from '../components/AddCommentForm';\nimport NotFoundPage from './NotFoundPage';\n\nconst ArticlePage = ({match}) => {\n    \n    const name = match.params.name;\n    const article = articleContent.find(article => article.name === name);\n\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: []});\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            console.log(body);\n            setArticleInfo(body);\n        }\n        fetchData();\n\n    }, [name]);\n\n    if(!article) return <NotFoundPage />\n\n    const otherArticles = articleContent.filter(article => article.name !== name);\n    return(\n        <>\n            <h1>{article.title}</h1>  \n            <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\n\n            {article.content.map((paragraph,key) =>(\n                <p key={key}>{paragraph}</p>\n            ))}\n            <CommentsList comments={articleInfo.comments} />\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo} />\n            <h3>Other Articles</h3>\n            <ArticlesList articles={otherArticles} />\n        </>\n    );\n}\nexport default ArticlePage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nconst NavBar  = () => (\n\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n                <Link to=\"/articles-list\">Articles List</Link>\n            </li>\n        </ul>\n    </nav>\n\n);\n\nexport default NavBar;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar';\nimport NotFoundPage from './pages/NotFoundPage';\n\nclass App extends Component {\n  render() {\n  return (\n    <Router>\n       <div className=\"App\">\n         <NavBar />\n         <div id=\"page-body\">\n             <Switch>\n               <Route path=\"/\" component={HomePage} exact/> \n               <Route path=\"/about\" component={AboutPage}/>\n               <Route path=\"/articles-list\" component={ArticlesListPage}/>\n               <Route path=\"/article/:name\" component={ArticlePage}/>\n               <Route component={NotFoundPage}/>\n             </Switch>\n         </div>\n       </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}